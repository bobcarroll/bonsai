/**
 * Bonsai - open source group collaboration and application lifecycle management
 * Copyright (c) 2011 Bob Carroll
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/**
 * @brief   Team Foundation catalog database functions
 *
 * @author  Bob Carroll (bob.carroll@alum.rit.edu)
 */

#include <string.h>
#include <stdlib.h>

#include <gcs/pgctxpool.h>
#include <gcs/log.h>

#include <tf/catalog.h>
#include <tf/catalogdb.h>
#include <tf/dbhelp.h>

/**
 * Retrieves catalog nodes from the database. Calling functions should
 * call tf_catalog_free_node_array() prior to freeing "result".
 *
 * @param ctx           current database context
 * @param pathspecs     a null-terminated array of catalog paths without depth markers
 * @param types         a null-terminated array of resource type ID strings to filter by
 * @param result        pointer to an output buffer for the results
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_fetch_nodes(pgctx *ctx, tf_path_spec **pathspecs, const char * const *types, tf_node ***result)
{
    if (!ctx || !pathspecs || !pathspecs[0] || !types || !result || *result)
        return TF_ERROR_BAD_PARAMETER;

    gcslog_debug("looking up catalog nodes with path(s)");

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = NULL;
    char countstmt[20480];
    char selstmt[20480];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    conn = ctx->conn;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL SET CONNECTION :conn;

    char where[10240];
    const int wherelen = 10240;
    int curpos = 0;
    int i = 0, r;
    tf_error dberr;

    bzero(&where, wherelen);

    for (i = 0; pathspecs[i]; i++) {
        char *pathval = NULL;
        int oldpathlen = strlen(pathspecs[i]->path);
        int newpathlen = 0;

        if (i > 0) {
            r = snprintf(where + curpos, wherelen - curpos, " OR ");
            if (r >= wherelen - curpos) {
                gcs_pgctx_release(ctx);
                return TF_ERROR_PARAM_TOO_LONG;
            }

            curpos += 4;
        }

        if (pathspecs[i]->depth == TF_CATALOG_NODE_DEPTH_NONE) {
            pathval = (char *)alloca(sizeof(char) * (oldpathlen + 1));
            strcpy(pathval, pathspecs[i]->path);
        } else {
            pathval = (char *)alloca(sizeof(char) * (oldpathlen + 2));
            sprintf(pathval, "%s%%", pathspecs[i]->path);

            newpathlen = (pathspecs[i]->depth == TF_CATALOG_NODE_DEPTH_SINGLE) ?
                TF_CATALOG_CHILD_ITEM_MAXLEN - 1 :
                TF_CATALOG_PARENT_PATH_MAXLEN - 1;
        }

        r = snprintf(
            where + curpos, 
            wherelen - curpos, 
            "(cn.parent_path || cn.child_item LIKE '%s' AND char_length(cn.parent_path) <= %d)", 
            pathval,
            newpathlen);
        if (r >= wherelen - curpos)
            return TF_ERROR_PARAM_TOO_LONG;

        curpos += strlen(where + curpos);
    }

    if (types[0]) {
        if (curpos >= wherelen - 28)
            return TF_ERROR_PARAM_TOO_LONG;

        memmove(where + 1, where, curpos + 1);
        curpos++;

        where[0] = '(';
        sprintf(where + curpos, ") AND (crt.identifier IN (");
        curpos += 26;

        dberr = tf_db_build_list(types, where, wherelen, &curpos);
        if (dberr != TF_ERROR_SUCCESS)
            return dberr;

        if (snprintf(where + curpos, wherelen - curpos, "))") >= wherelen - curpos)
            return TF_ERROR_PARAM_TOO_LONG;

        curpos += strlen(where + curpos);
    }

    sprintf(countstmt, 
        "SELECT COUNT(*) \
         FROM catalog_nodes AS cn \
         INNER JOIN catalog_resources AS cr \
            ON cn.resource_identifier = cr.identifier \
         INNER JOIN catalog_resource_types AS crt \
            ON cr.fk_resource_type = crt.identifier \
         WHERE %s", 
        where);
    gcslog_trace("fetch catalog nodes SQL: %s", countstmt);

    EXEC SQL PREPARE sqlstmt FROM :countstmt;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL EXECUTE sqlstmt INTO :count;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    gcslog_debug("found %d matching catalog node(s)", count);
    *result = (tf_node **)calloc(count + 1, sizeof(tf_node *));

    if (count == 0)
        return TF_ERROR_SUCCESS;

    sprintf(selstmt, 
        "SELECT cn.parent_path, cn.child_item, cn.\"default\", \
                cr.identifier, cr.display_name, cr.description, cr.fk_property_artifact, \
                crt.identifier, crt.display_name, crt.description \
         FROM catalog_nodes AS cn \
         INNER JOIN catalog_resources AS cr \
            ON cn.resource_identifier = cr.identifier \
         INNER JOIN catalog_resource_types AS crt \
            ON cr.fk_resource_type = crt.identifier \
         WHERE %s", 
        where);

    EXEC SQL PREPARE sqlstmt FROM :selstmt;

    EXEC SQL DECLARE cur1 CURSOR FOR sqlstmt;
    EXEC SQL OPEN cur1;

    for (i = 0; ; i++) {
        EXEC SQL WHENEVER NOT FOUND DO BREAK;

        EXEC SQL BEGIN DECLARE SECTION;
        char parent[TF_CATALOG_PARENT_PATH_MAXLEN];
        char child[TF_CATALOG_CHILD_ITEM_MAXLEN];
        int fdefault;
        char resid[TF_CATALOG_RESOURCE_ID_MAXLEN];
        char resname[TF_CATALOG_RESOURCE_NAME_MAXLEN];
        char *resdesc = NULL;
        int resdesc_ind;
        int propid;
        int propid_ind;
        char typeid[TF_CATALOG_RESOURCE_TYPE_MAXLEN];
        char typename[TF_CATALOG_RESOURCE_TYPE_NAME_MAXLEN];
        char *typedesc = NULL;
        int typedesc_ind;
        EXEC SQL END DECLARE SECTION;

        EXEC SQL FETCH NEXT FROM cur1
            INTO :parent, :child, :fdefault,
                 :resid, :resname, :resdesc:resdesc_ind, :propid:propid_ind,
                 :typeid, :typename, :typedesc:typedesc_ind;

        tf_node *item = (*result)[i] = (tf_node *)malloc(sizeof(tf_node));
        bzero(item, sizeof(tf_node));

        strncpy(item->parent, parent, TF_CATALOG_PARENT_PATH_MAXLEN);
        strncpy(item->child, child, TF_CATALOG_CHILD_ITEM_MAXLEN);
        item->fdefault = fdefault;

        strncpy(item->resource.id, resid, TF_CATALOG_RESOURCE_NAME_MAXLEN);
        strncpy(item->resource.name, resname, TF_CATALOG_RESOURCE_NAME_MAXLEN);
        item->resource.description = !resdesc_ind ? strdup(resdesc) : NULL;
        item->resource.propertyid = propid;

        strncpy(item->resource.type.id, typeid, TF_CATALOG_RESOURCE_TYPE_MAXLEN);
        strncpy(item->resource.type.name, typename, TF_CATALOG_RESOURCE_TYPE_NAME_MAXLEN);
        item->resource.type.description = !typedesc_ind ? strdup(typedesc) : NULL;

        free(resdesc);
        free(typedesc);
    }

    EXEC SQL CLOSE cur1;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    return TF_ERROR_SUCCESS;

error:
    gcslog_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}

/**
 * Retrieves catalog nodes from the database by resource ID. Calling functions
 * should call tf_free_node_array() to free "result".
 *
 * @param ctx       current database context
 * @param idarr     a null-terminated array of resource ID strings to lookup
 * @param types     flag to indicate if idarr has resource type ID strings
 * @param result    pointer to an output buffer for the results
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_fetch_resources(pgctx *ctx, const char * const *idarr, int types, tf_node ***result)
{
    if (!ctx || !idarr || !idarr[0] || !result || *result)
        return TF_ERROR_BAD_PARAMETER;

    gcslog_debug("looking up catalog resources");

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = NULL;
    char countstmt[20480];
    char selstmt[20480];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    conn = ctx->conn;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL SET CONNECTION :conn;

    char residlst[10240];
    const int residlen = 10240;
    int curpos = 0;
    tf_error dberr;

    bzero(&residlst, residlen);

    dberr = tf_db_build_list(idarr, residlst, residlen, &curpos);
    if (dberr != TF_ERROR_SUCCESS)
        return dberr;

    sprintf(countstmt, 
        "SELECT COUNT(*) \
         FROM catalog_nodes AS cn \
         INNER JOIN catalog_resources AS cr \
            ON cn.resource_identifier = cr.identifier \
         INNER JOIN catalog_resource_types AS crt \
            ON cr.fk_resource_type = crt.identifier \
         WHERE %s IN (%s)", 
        types ? "crt.identifier" : "cr.identifier", 
        residlst);
    gcslog_trace("fetch catalog resources SQL: %s", countstmt);

    EXEC SQL PREPARE sqlstmt FROM :countstmt;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL EXECUTE sqlstmt INTO :count;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    gcslog_debug("found %d matching resource(s)", count);
    *result = (tf_node **)calloc(count + 1, sizeof(tf_node *));

    if (count == 0)
        return TF_ERROR_SUCCESS;

    sprintf(selstmt, 
        "SELECT cn.parent_path, cn.child_item, cn.\"default\", \
                cr.identifier, cr.display_name, cr.description, cr.fk_property_artifact, \
                crt.identifier, crt.display_name, crt.description \
         FROM catalog_nodes AS cn \
         INNER JOIN catalog_resources AS cr \
            ON cn.resource_identifier = cr.identifier \
         INNER JOIN catalog_resource_types AS crt \
            ON cr.fk_resource_type = crt.identifier \
         WHERE %s IN (%s)", 
        types ? "crt.identifier" : "cr.identifier", 
        residlst);

    EXEC SQL PREPARE sqlstmt FROM :selstmt;

    EXEC SQL DECLARE cur2 CURSOR FOR sqlstmt;
    EXEC SQL OPEN cur2;

    int i;
    for (i = 0; ; i++) {
        EXEC SQL WHENEVER NOT FOUND DO BREAK;

        EXEC SQL BEGIN DECLARE SECTION;
        char parent[TF_CATALOG_PARENT_PATH_MAXLEN];
        char child[TF_CATALOG_CHILD_ITEM_MAXLEN];
        int fdefault;
        char resid[TF_CATALOG_RESOURCE_ID_MAXLEN];
        char resname[TF_CATALOG_RESOURCE_NAME_MAXLEN];
        char *resdesc = NULL;
        int resdesc_ind;
        int propid;
        int propid_ind;
        char typeid[TF_CATALOG_RESOURCE_TYPE_MAXLEN];
        char typename[TF_CATALOG_RESOURCE_TYPE_NAME_MAXLEN];
        char *typedesc = NULL;
        int typedesc_ind;
        EXEC SQL END DECLARE SECTION;

        EXEC SQL FETCH NEXT FROM cur2
            INTO :parent, :child, :fdefault,
                 :resid, :resname, :resdesc:resdesc_ind, :propid:propid_ind,
                 :typeid, :typename, :typedesc:typedesc_ind;

        tf_node *item = (*result)[i] = (tf_node *)malloc(sizeof(tf_node));
        bzero(item, sizeof(tf_node));

        strncpy(item->parent, parent, TF_CATALOG_PARENT_PATH_MAXLEN);
        strncpy(item->child, child, TF_CATALOG_CHILD_ITEM_MAXLEN);
        item->fdefault = fdefault;

        strncpy(item->resource.id, resid, TF_CATALOG_RESOURCE_NAME_MAXLEN);
        strncpy(item->resource.name, resname, TF_CATALOG_RESOURCE_NAME_MAXLEN);
        item->resource.description = !resdesc_ind ? strdup(resdesc) : NULL;
        item->resource.propertyid = propid;

        strncpy(item->resource.type.id, typeid, TF_CATALOG_RESOURCE_TYPE_MAXLEN);
        strncpy(item->resource.type.name, typename, TF_CATALOG_RESOURCE_TYPE_NAME_MAXLEN);
        item->resource.type.description = !typedesc_ind ? strdup(typedesc) : NULL;

        free(resdesc);
        free(typedesc);
    }

    EXEC SQL CLOSE cur2;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    return TF_ERROR_SUCCESS;

error:
    gcslog_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}

/**
 * Retrieves catalog service references from the database. Calling functions
 * should call tf_free_service_ref_array() to free "result".
 *
 * @param ctx       current database context
 * @param instid    project collection instance ID
 * @param result    pointer to an output buffer for the results
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_fetch_pc_service_refs(pgctx *ctx, const char *instid, tf_service_ref ***result)
{
    if (!ctx || !instid || !result || *result)
        return TF_ERROR_BAD_PARAMETER;

    gcslog_debug("looking up service references for host instance %s", instid);

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = NULL;
    char countstmt[20480];
    char selstmt[20480];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    conn = ctx->conn;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL SET CONNECTION :conn;

    sprintf(countstmt, 
        "SELECT COUNT(*) \
        FROM catalog_nodes AS cn \
        JOIN catalog_resources AS cr \
            ON cn.resource_identifier = cr.identifier \
            AND cr.fk_resource_type = '%s' \
        JOIN property_values AS pv \
            ON cr.fk_property_artifact = pv.artifact_id \
            AND pv.fk_property_id = %d \
        JOIN catalog_service_references AS csr \
            ON cr.identifier = csr.resource_identifier \
        JOIN service_definitions AS sd \
            ON csr.fk_service_identifier = sd.identifier \
            AND csr.fk_service_type = sd.service_type \
        JOIN tool_types AS tt \
           ON sd.fk_tool_id = tt.id \
        WHERE pv.value = '%s'",
        TF_CATALOG_TYPE_TEAM_PRJ_COLLECITON,
        TF_CATALOG_PROPERTY_INSTANCE_ID_ID,
        instid);
    gcslog_trace("fetch catalog services SQL: %s", countstmt);

    EXEC SQL PREPARE sqlstmt FROM :countstmt;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL EXECUTE sqlstmt INTO :count;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    gcslog_debug("found %d catalog service(s)", count);
    *result = (tf_service_ref **)calloc(count + 1, sizeof(tf_service_ref *));

    if (count == 0)
        return TF_ERROR_SUCCESS;

    sprintf(selstmt, 
        "SELECT csr.resource_identifier, csr.association_key, \
                sd.identifier, sd.service_type, sd.display_name, \
                sd.relative_to_setting, sd.relative_path, \
                sd.singleton, sd.description, tt.type \
        FROM catalog_nodes AS cn \
        JOIN catalog_resources AS cr \
            ON cn.resource_identifier = cr.identifier \
            AND cr.fk_resource_type = '%s' \
        JOIN property_values AS pv \
            ON cr.fk_property_artifact = pv.artifact_id \
            AND pv.fk_property_id = %d \
        JOIN catalog_service_references AS csr \
            ON cr.identifier = csr.resource_identifier \
        JOIN service_definitions AS sd \
            ON csr.fk_service_identifier = sd.identifier \
            AND csr.fk_service_type = sd.service_type \
        JOIN tool_types AS tt \
           ON sd.fk_tool_id = tt.id \
        WHERE pv.value = '%s'",
        TF_CATALOG_TYPE_TEAM_PRJ_COLLECITON,
        TF_CATALOG_PROPERTY_INSTANCE_ID_ID,
        instid);

    EXEC SQL PREPARE sqlstmt FROM :selstmt;

    EXEC SQL DECLARE cur5 CURSOR FOR sqlstmt;
    EXEC SQL OPEN cur5;

    int i;
    for (i = 0; ; i++) {
        EXEC SQL WHENEVER NOT FOUND DO BREAK;

        EXEC SQL BEGIN DECLARE SECTION;
        char resid[TF_CATALOG_RESOURCE_ID_MAXLEN];
        char assockey[TF_CATALOG_ASSOCIATION_KEY_MAXLEN];
        char svcid[TF_LOCATION_SERVICE_ID_MAXLEN];
        char svctype[TF_LOCATION_SERVICE_TYPE_MAXLEN];
        char svcname[TF_LOCATION_SERVICE_NAME_MAXLEN];
        int reltosetting;
        char relpath[TF_LOCATION_SERVICE_REL_PATH_MAXLEN];
        int relpath_ind;
        int singleton;
        char *svcdesc = NULL;
        int svcdesc_ind;
        char tooltype[TF_LOCATION_SERVICE_TOOL_TYPE_MAXLEN];
        EXEC SQL END DECLARE SECTION;

        EXEC SQL FETCH NEXT FROM cur5
            INTO :resid, :assockey, :svcid, :svctype, :svcname, :reltosetting,
                 :relpath:relpath_ind, :singleton, :svcdesc:svcdesc_ind, :tooltype;

        tf_service_ref *item = (*result)[i] = (tf_service_ref *)malloc(sizeof(tf_service_ref));
        bzero(item, sizeof(tf_service_ref));

        strncpy(item->id, resid, TF_CATALOG_RESOURCE_NAME_MAXLEN);
        strncpy(item->assockey, assockey, TF_CATALOG_ASSOCIATION_KEY_MAXLEN);

        strncpy(item->service.id, svcid, TF_LOCATION_SERVICE_ID_MAXLEN);
        strncpy(item->service.type, svctype, TF_LOCATION_SERVICE_TYPE_MAXLEN);
        strncpy(item->service.name, svcname, TF_LOCATION_SERVICE_NAME_MAXLEN);
        strncpy(item->service.tooltype, tooltype, TF_LOCATION_SERVICE_TOOL_TYPE_MAXLEN);

        item->service.reltosetting = reltosetting;
        item->service.singleton = singleton;

        if (!relpath_ind)
            strncpy(item->service.relpath, relpath, TF_LOCATION_SERVICE_REL_PATH_MAXLEN);

        item->service.description = !svcdesc_ind ? strdup(svcdesc) : NULL;

        free(svcdesc);
    }

    EXEC SQL CLOSE cur5;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    return TF_ERROR_SUCCESS;

error:
    gcslog_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}

/**
 * Retrieves catalog service references from the database. Calling functions
 * should call tf_free_service_ref_array() to free "result".
 *
 * @param ctx       current database context
 * @param nodes     a null-terminated array of nodes to lookup services for
 * @param result    pointer to an output buffer for the results
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_fetch_service_refs(pgctx *ctx, tf_node **nodes, tf_service_ref ***result)
{
    if (!ctx || !nodes || !nodes[0] || !result || *result)
        return TF_ERROR_BAD_PARAMETER;

    gcslog_debug("looking up service references for catalog node(s)");

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = NULL;
    char countstmt[20480];
    char selstmt[20480];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    conn = ctx->conn;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL SET CONNECTION :conn;

    char residlst[10240];
    const int residlen = 10240;
    int curpos = 0;
    int r = residlen - curpos, i = 0;

    bzero(&residlst, residlen);

    for (i = 0; nodes[i]; i++) {
        if (i > 0) {
            if (snprintf(residlst + curpos, r, ", ") >= r)
                return TF_ERROR_PARAM_TOO_LONG;

            curpos += 2;
            r = residlen - curpos;
        }

        if (snprintf(residlst + curpos, r, "'%s'", nodes[i]->resource.id) >= r)
            return TF_ERROR_PARAM_TOO_LONG;

        curpos += strlen(residlst + curpos);
        r = residlen - curpos;
    }

    sprintf(countstmt, 
        "SELECT COUNT(*) \
        FROM catalog_service_references AS csr \
        JOIN service_definitions AS sd \
           ON csr.fk_service_identifier = sd.identifier \
           AND csr.fk_service_type = sd.service_type \
        JOIN tool_types AS tt \
           ON sd.fk_tool_id = tt.id \
        WHERE csr.resource_identifier IN (%s)", 
        residlst);
    gcslog_trace("fetch catalog services SQL: %s", countstmt);

    EXEC SQL PREPARE sqlstmt FROM :countstmt;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL EXECUTE sqlstmt INTO :count;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    gcslog_debug("found %d catalog service(s)", count);
    *result = (tf_service_ref **)calloc(count + 1, sizeof(tf_service_ref *));

    if (count == 0)
        return TF_ERROR_SUCCESS;

    sprintf(selstmt, 
        "SELECT csr.resource_identifier, csr.association_key, \
                sd.identifier, sd.service_type, sd.display_name, \
                sd.relative_to_setting, sd.relative_path, \
                sd.singleton, sd.description, tt.type \
        FROM catalog_service_references AS csr \
        JOIN service_definitions AS sd \
           ON csr.fk_service_identifier = sd.identifier \
           AND csr.fk_service_type = sd.service_type \
        JOIN tool_types AS tt \
           ON sd.fk_tool_id = tt.id \
        WHERE csr.resource_identifier IN (%s)", 
        residlst);

    EXEC SQL PREPARE sqlstmt FROM :selstmt;

    EXEC SQL DECLARE cur3 CURSOR FOR sqlstmt;
    EXEC SQL OPEN cur3;

    for (i = 0; ; i++) {
        EXEC SQL WHENEVER NOT FOUND DO BREAK;

        EXEC SQL BEGIN DECLARE SECTION;
        char resid[TF_CATALOG_RESOURCE_ID_MAXLEN];
        char assockey[TF_CATALOG_ASSOCIATION_KEY_MAXLEN];
        char svcid[TF_LOCATION_SERVICE_ID_MAXLEN];
        char svctype[TF_LOCATION_SERVICE_TYPE_MAXLEN];
        char svcname[TF_LOCATION_SERVICE_NAME_MAXLEN];
        int reltosetting;
        char relpath[TF_LOCATION_SERVICE_REL_PATH_MAXLEN];
        int relpath_ind;
        int singleton;
        char *svcdesc = NULL;
        int svcdesc_ind;
        char tooltype[TF_LOCATION_SERVICE_TOOL_TYPE_MAXLEN];
        EXEC SQL END DECLARE SECTION;

        EXEC SQL FETCH NEXT FROM cur3
            INTO :resid, :assockey, :svcid, :svctype, :svcname, :reltosetting,
                 :relpath:relpath_ind, :singleton, :svcdesc:svcdesc_ind, :tooltype;

        tf_service_ref *item = (*result)[i] = (tf_service_ref *)malloc(sizeof(tf_service_ref));
        bzero(item, sizeof(tf_service_ref));

        strncpy(item->id, resid, TF_CATALOG_RESOURCE_NAME_MAXLEN);
        strncpy(item->assockey, assockey, TF_CATALOG_ASSOCIATION_KEY_MAXLEN);

        strncpy(item->service.id, svcid, TF_LOCATION_SERVICE_ID_MAXLEN);
        strncpy(item->service.type, svctype, TF_LOCATION_SERVICE_TYPE_MAXLEN);
        strncpy(item->service.name, svcname, TF_LOCATION_SERVICE_NAME_MAXLEN);
        strncpy(item->service.tooltype, tooltype, TF_LOCATION_SERVICE_TOOL_TYPE_MAXLEN);

        item->service.reltosetting = reltosetting;
        item->service.singleton = singleton;

        if (!relpath_ind)
            strncpy(item->service.relpath, relpath, TF_LOCATION_SERVICE_REL_PATH_MAXLEN);

        item->service.description = !svcdesc_ind ? strdup(svcdesc) : NULL;

        free(svcdesc);
    }

    EXEC SQL CLOSE cur3;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    return TF_ERROR_SUCCESS;

error:
    gcslog_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}

/**
 * Retrieves properties for the given catalog nodes. Calling functions
 * should call tf_free_property_array() to free "result".
 *
 * @param ctx       current database context
 * @param nodes     a null-terminated array of nodes to lookup services for
 * @param result    pointer to an output buffer for the results
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_fetch_properties(pgctx *ctx, tf_node **nodes, tf_property ***result)
{
    if (!ctx || !nodes || !nodes[0] || !result || *result)
        return TF_ERROR_BAD_PARAMETER;

    gcslog_debug("looking up resource properties for catalog node(s)");

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = NULL;
    char countstmt[20480];
    char selstmt[20480];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    conn = ctx->conn;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL SET CONNECTION :conn;

    char idlst[10240];
    const int idlen = 10240;
    int curpos = 0;
    int r = idlen - curpos, i = 0;

    bzero(&idlst, idlen);

    for (i = 0; nodes[i]; i++) {
        if (i > 0) {
            if (snprintf(idlst + curpos, r, ", ") >= r)
                return TF_ERROR_PARAM_TOO_LONG;

            curpos += 2;
            r = idlen - curpos;
        }

        if (snprintf(idlst + curpos, r, "%d", nodes[i]->resource.propertyid) >= r)
            return TF_ERROR_PARAM_TOO_LONG;

        curpos += strlen(idlst + curpos);
        r = idlen - curpos;
    }

    sprintf(countstmt, 
        "SELECT COUNT(*) \
        FROM property_values AS pv \
        JOIN property_definitions AS pd \
           ON pv.fk_property_id = pd.id \
        WHERE artifact_id IN (%s)",
        idlst);
    gcslog_trace("fetch resource properties SQL: %s", countstmt);

    EXEC SQL PREPARE sqlstmt FROM :countstmt;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL EXECUTE sqlstmt INTO :count;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    gcslog_debug("found %d resource properties", count);
    *result = (tf_property **)calloc(count + 1, sizeof(tf_property **));

    if (count == 0)
        return TF_ERROR_SUCCESS;

    sprintf(selstmt, 
        "SELECT pv.artifact_id, pv.\"version\", pv.internal_kind_id, pv.value, \
                pd.name, pd.type_id \
        FROM property_values AS pv \
        JOIN property_definitions AS pd \
           ON pv.fk_property_id = pd.id \
        WHERE artifact_id IN (%s)",
        idlst);

    EXEC SQL PREPARE sqlstmt FROM :selstmt;

    EXEC SQL DECLARE cur4 CURSOR FOR sqlstmt;
    EXEC SQL OPEN cur4;

    for (i = 0; ; i++) {
        EXEC SQL WHENEVER NOT FOUND DO BREAK;

        EXEC SQL BEGIN DECLARE SECTION;
        int artifactid;
        int version;
        int kindid;
        char *value;
        int value_ind;
        char property[TF_CATALOG_PROPERTY_NAME_MAXLEN];
        int typeid;
        EXEC SQL END DECLARE SECTION;

        EXEC SQL FETCH NEXT FROM cur4
            INTO :artifactid, :version, :kindid, :value:value_ind,
                 :property, :typeid;

        tf_property *item = (*result)[i] = (tf_property *)malloc(sizeof(tf_property));
        bzero(item, sizeof(tf_property));

        item->artifactid = artifactid;
        item->version = version;
        item->kindid = kindid;

        strncpy(item->property, property, TF_CATALOG_PROPERTY_NAME_MAXLEN);
        item->value = !value_ind ? strdup(value) : NULL;

        free(value);
    }

    EXEC SQL CLOSE cur4;
    EXEC SQL DEALLOCATE PREPARE sqlstmt;

    return TF_ERROR_SUCCESS;

error:
    gcslog_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}

