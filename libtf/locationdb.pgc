/**
 * Bonsai - open source group collaboration and application lifecycle management
 * Copyright (c) 2011 Bob Carroll
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/**
 * @brief   Team Foundation location databse functions
 *
 * @author  Bob Carroll (bob.carroll@alum.rit.edu)
 */

#include <string.h>
#include <stdlib.h>

#include <log.h>

#include <tf/location.h>

/**
 * Retrieves service defitions from the database. Calling functions should
 * call tf_free_service_array() to free "result"..
 *
 * @param ctx       current database context
 * @param filters   a null-terminated array of service filters
 * @param result    pointer to an output buffer for the results
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_fetch_services(pgctx *ctx, tf_service_filter **filters, tf_service ***result)
{
    if (!ctx || !filters || !filters[0] || !result || *result)
        return TF_ERROR_BAD_PARAMETER;

    log_debug("looking up service definitions");

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = ctx->conn;
    char countstmt[20480];
    char selstmt[20480];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    char where[10246];
    char idtypelst[10240];
    const int idtypelen = 10240;
    int curpos = 0;
    int i = 0, r, fwhere = 0;

    bzero(&idtypelst, idtypelen);

    for (i = 0; filters[i]; i++) {
        if (strcmp(filters[i]->id, TF_LOCATION_FILTER_SERVICE_ID) == 0 &&
            strcmp(filters[i]->type, TF_LOCATION_FILTER_SERVICE_TYPE) == 0)
            continue;

        if (fwhere && i > 0) {
            r = snprintf(idtypelst + curpos, idtypelen - curpos, " OR ");
            if (r >= idtypelen - curpos)
                return TF_ERROR_PARAM_TOO_LONG;

            curpos += 4;
        }

        r = snprintf(
            idtypelst + curpos,
            idtypelen - curpos,
            "(sd.identifier = '%s' AND sd.service_type = '%s')",
            filters[i]->id,
            filters[i]->type);
        if (r >= idtypelen - curpos)
            return TF_ERROR_PARAM_TOO_LONG;

        curpos += strlen(idtypelst + curpos);
        fwhere = 1;
    }

    if (fwhere)
        snprintf(where, 10246, "WHERE %s", idtypelst);
    else
        where[0] = '\0';

    sprintf(countstmt, 
        "SELECT COUNT(*) \
        FROM service_definitions AS sd \
        JOIN tool_types AS tt \
           ON sd.fk_tool_id = tt.id \
        %s",
        where);
    log_trace("fetch service definitions SQL: %s", countstmt);

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL AT :conn PREPARE sqlstmt FROM :countstmt;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL AT :conn EXECUTE sqlstmt INTO :count;

    log_debug("found %d service definition(s)", count);
    *result = (tf_service **)calloc(count + 1, sizeof(tf_service *));

    if (count == 0)
        return TF_ERROR_SUCCESS;

    sprintf(selstmt, 
        "SELECT sd.identifier, sd.service_type, sd.display_name, \
                sd.relative_to_setting, sd.relative_path, \
                sd.singleton, sd.description, tt.type \
        FROM service_definitions AS sd \
        JOIN tool_types AS tt \
           ON sd.fk_tool_id = tt.id \
        %s",
        where);

    EXEC SQL AT :conn PREPARE sqlstmt FROM :selstmt;

    EXEC SQL AT :conn DECLARE fetch_services CURSOR FOR sqlstmt;
    EXEC SQL AT :conn OPEN fetch_services;
    EXEC SQL WHENEVER SQLERROR GOTO error_cur;

    for (i = 0; ; i++) {
        EXEC SQL WHENEVER NOT FOUND DO BREAK;

        EXEC SQL BEGIN DECLARE SECTION;
        char svcid[TF_LOCATION_SERVICE_ID_MAXLEN];
        char svctype[TF_LOCATION_SERVICE_TYPE_MAXLEN];
        char svcname[TF_LOCATION_SERVICE_NAME_MAXLEN];
        int reltosetting;
        char relpath[TF_LOCATION_SERVICE_REL_PATH_MAXLEN];
        int relpath_ind;
        int singleton;
        char *svcdesc = NULL;
        int svcdesc_ind;
        char tooltype[TF_LOCATION_SERVICE_TOOL_TYPE_MAXLEN];
        EXEC SQL END DECLARE SECTION;

        EXEC SQL AT :conn FETCH NEXT FROM fetch_services
            INTO :svcid, :svctype, :svcname, :reltosetting, :relpath:relpath_ind,
                 :singleton, :svcdesc:svcdesc_ind, :tooltype;

        tf_service *item = (*result)[i] = (tf_service *)malloc(sizeof(tf_service));
        bzero(item, sizeof(tf_service));

        strncpy(item->id, svcid, TF_LOCATION_SERVICE_ID_MAXLEN);
        strncpy(item->type, svctype, TF_LOCATION_SERVICE_TYPE_MAXLEN);
        strncpy(item->name, svcname, TF_LOCATION_SERVICE_NAME_MAXLEN);
        strncpy(item->tooltype, tooltype, TF_LOCATION_SERVICE_TOOL_TYPE_MAXLEN);

        item->reltosetting = reltosetting;
        item->singleton = singleton;

        if (!relpath_ind)
            strncpy(item->relpath, relpath, TF_LOCATION_SERVICE_REL_PATH_MAXLEN);

        item->description = !svcdesc_ind ? strdup(svcdesc) : NULL;

        free(svcdesc);
    }

    EXEC SQL AT :conn CLOSE fetch_services;
    return TF_ERROR_SUCCESS;

error_cur:
    log_error(sqlca.sqlerrm.sqlerrmc);

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL AT :conn CLOSE fetch_services;

    return TF_ERROR_PG_FAILURE;

error:
    log_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}

/**
 * Retrieves access mappings from the database. Calling functions should
 * call tf_free_access_map_array() to free "result".
 *
 * @param ctx       current database context
 * @param result    pointer to an output buffer for the results
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_fetch_access_map(pgctx *ctx, tf_access_map ***result)
{
    if (!ctx || !result || *result)
        return TF_ERROR_BAD_PARAMETER;

    log_debug("looking up access mappings");

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = ctx->conn;
    char countstmt[20480];
    char selstmt[20480];
    int count = 0;
    EXEC SQL END DECLARE SECTION;

    sprintf(countstmt, 
        "SELECT COUNT(*) \
        FROM access_mappings");
    log_trace("fetch access mappings SQL: %s", countstmt);

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL AT :conn PREPARE sqlstmt FROM :countstmt;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;
    EXEC SQL AT :conn EXECUTE sqlstmt INTO :count;

    log_debug("found %d access mapping(s)", count);
    *result = (tf_access_map **)calloc(count + 1, sizeof(tf_access_map *));

    if (count == 0)
        return TF_ERROR_SUCCESS;

    sprintf(selstmt, 
        "SELECT moniker, display_name, access_point, is_default \
        FROM access_mappings");

    EXEC SQL AT :conn PREPARE sqlstmt FROM :selstmt;

    EXEC SQL AT :conn DECLARE fetch_access_map CURSOR FOR sqlstmt;
    EXEC SQL AT :conn OPEN fetch_access_map;
    EXEC SQL WHENEVER SQLERROR GOTO error_cur;

    int i;
    for (i = 0; ; i++) {
        EXEC SQL WHENEVER NOT FOUND DO BREAK;

        EXEC SQL BEGIN DECLARE SECTION;
        char moniker[TF_LOCATION_ACCMAP_MONIKER_MAXLEN];
        char name[TF_LOCATION_ACCMAP_DISPLNAME_MAXLEN];
        char *apuri = NULL;
        int fdefault;
        EXEC SQL END DECLARE SECTION;

        EXEC SQL AT :conn FETCH NEXT FROM fetch_access_map
            INTO :moniker, :name, :apuri, :fdefault;

        tf_access_map *item = (*result)[i] = (tf_access_map *)malloc(sizeof(tf_access_map));
        bzero(item, sizeof(tf_access_map));

        strncpy(item->moniker, moniker, TF_LOCATION_ACCMAP_MONIKER_MAXLEN);
        strncpy(item->name, name, TF_LOCATION_ACCMAP_DISPLNAME_MAXLEN);

        item->apuri = strdup(apuri);
        item->fdefault = fdefault;

        free(apuri);
    }

    EXEC SQL AT :conn CLOSE fetch_access_map;
    return TF_ERROR_SUCCESS;

error_cur:
    log_error(sqlca.sqlerrm.sqlerrmc);

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL AT :conn CLOSE fetch_access_map;

    return TF_ERROR_PG_FAILURE;

error:
    log_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}

/**
 * Adds the given access mapping to the database.
 *
 * @param ctx       current database context
 * @param accmap    access mapping to add
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_add_access_map(pgctx *ctx, tf_access_map *accmap)
{
    if (!ctx || !accmap || !accmap->moniker[0] || !accmap->name[0] ||
            !accmap->apuri || !accmap->apuri[0])
        return TF_ERROR_BAD_PARAMETER;

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = ctx->conn;
    const char *amstmt = 
        "INSERT INTO access_mappings \
           (moniker, display_name, access_point, is_default) \
           VALUES (?, ?, ?, ?)";
    const char *moniker = accmap->moniker;
    const char *name = accmap->name;
    const char *apuri = accmap->apuri;
    int fdefault = accmap->fdefault;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    log_debug("inserting new access mapping ('%s', '%s', '%s')", moniker, name, apuri);

    EXEC SQL AT :conn PREPARE sqlstmt FROM :amstmt;
    EXEC SQL AT :conn EXECUTE sqlstmt USING :moniker, :name, :apuri, :fdefault;

    return TF_ERROR_SUCCESS;

error:
    log_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}

/**
 * Adds the given service definition to the database.
 *
 * @param ctx       current database context
 * @param service   service definition to add
 *
 * @return TF_ERROR_SUCCESS or an error code
 */
tf_error tf_add_service(pgctx *ctx, tf_service *service)
{
    if (!ctx || !service || !service->id[0] || !service->name[0] || !service->type[0])
        return TF_ERROR_BAD_PARAMETER;

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = ctx->conn;
    const char *ttstmt = "SELECT id FROM tool_types WHERE \"type\" = ?";
    const char *servstmt = 
        "INSERT INTO service_definitions \
           (identifier, service_type, display_name, relative_to_setting, relative_path, \
            singleton, description, fk_tool_id) \
           VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
    const char *id = service->id;
    const char *type = service->type;
    const char *name = service->name;
    int reltosetting = service->reltosetting;
    const char *relpath = service->relpath;
    int relpath_ind = relpath[0] ? 0 : -1;
    int singleton = service->singleton;
    const char *desc = service->description;
    int desc_ind = desc ? 0 : -1;
    char *tooltype = service->tooltype;
    int ttid = -1;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL WHENEVER NOT FOUND GOTO not_found;

    log_debug("looking up primary key for tool type '%s'", tooltype);

    EXEC SQL AT :conn PREPARE sqlstmt FROM :ttstmt;
    EXEC SQL AT :conn EXECUTE sqlstmt USING :tooltype INTO :ttid;

    EXEC SQL WHENEVER NOT FOUND CONTINUE;

    log_debug("inserting new service definition ('%s', '%s', '%s')", id, type, name);

    EXEC SQL AT :conn PREPARE sqlstmt FROM :servstmt;
    EXEC SQL AT :conn EXECUTE sqlstmt USING :id, :type, :name, :reltosetting, 
        :relpath:relpath_ind, :singleton, :desc:desc_ind, :ttid;

    return TF_ERROR_SUCCESS;

not_found:
    log_error("primary key for tool type '%s' not found", tooltype);
    return TF_ERROR_NOT_FOUND;

error:
    log_error(sqlca.sqlerrm.sqlerrmc);
    return TF_ERROR_PG_FAILURE;
}
