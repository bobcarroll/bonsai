/**
 * Bonsai - open source group collaboration and application lifecycle management
 * Copyright (c) 2011 Bob Carroll
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/**
 * @brief   common Postgres functions
 *
 * @author  Bob Carroll (bob.carroll@alum.rit.edu)
 */

#include <stdlib.h>
#include <pthread.h>

#include <pgcommon.h>
#include <log.h>

/**
 * Connects to the database.
 *
 * @param dsn       the database source name in the form of dbname[@hostname][:port]
 * @param username  the username to connect as
 * @param passwd    the user password
 * @param count     the number of connections to open
 * @param tag       an optional marker for PG contexts for targeting queries
 *
 * @return 1 on success, 0 on failure
 *
 * @seealso http://www.postgresql.org/docs/9.0/static/ecpg-connect.html
 */
int pg_connect(const char *dsn, const char *username, const char *passwd, int count, const char *tag)
{
    if (!dsn || !username || !passwd)
        return 0;

    log_info("connecting to %s as %s", dsn, username);

    EXEC SQL BEGIN DECLARE SECTION;
    const char *dsnval = dsn;
    const char *usernameval = username;
    const char *passwdval = passwd;
    char *connval = (char *)alloca(sizeof(char) * 10);
    EXEC SQL END DECLARE SECTION;

    int poolsize = pg_pool_size();
    int ctxcount = pg_context_count();

    if (poolsize == 0 || (ctxcount + count) > poolsize) {
        log_debug("poolsize=%d ctxcount=%d count=%d", poolsize, ctxcount, count);
        log_error("context pool is uninitialised or not enough contexts are available");
        return 0;
    }

    EXEC SQL WHENEVER SQLERROR GOTO error;

    int i;
    for (i = 0; i < count; i++) {
        sprintf(connval, "conn%d", ctxcount + i);

        EXEC SQL CONNECT TO :dsnval AS :connval USER :usernameval USING :passwdval;
        pg_context_alloc(connval, dsn, tag);
    }

    log_notice("connected to PG (%s)", dsn);
    return 1;

error:
    log_error(sqlca.sqlerrm.sqlerrmc);
    return 0;
}

/**
 * Disconnects all open connections to the database, and frees
 * all associated resources.
 *
 * @return 1 on success, 0 on failure
 */
int pg_disconnect()
{
    log_info("disconnecting from PG");

    EXEC SQL BEGIN DECLARE SECTION;
    const char *connval = NULL;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL DISCONNECT ALL;

    pg_pool_free();
    
    return 1;

error:
    log_error(sqlca.sqlerrm.sqlerrmc);
    return 0;
}

/**
 * Acquires a thread-exclusive database connection with a new transaction.
 * If a transaction is already started for this thread then it will be
 * reused. This function will block until a connection becomes available.
 *
 * Passing NULL for the tag argument will always return bootstrapping
 * contexts (as in, contexts created without a tag) even if the contexts
 * were retagged by calling pg_context_retag_default().
 *
 * @param tag   an optional marker for PG contexts for targeting queries

 * @return a connection context
 */
pgctx *pg_acquire_trans(const char *tag)
{
    pgctx *ctx = pg_context_acquire(tag);

    if (ctx->trans) {
        log_debug("re-using existing transaction for PG context %s", ctx->conn);
        ctx->trans++;
        return ctx;
    }

    log_debug("beginning transaction for PG context %s", ctx->conn);
    ctx->trans = 1;

    EXEC SQL BEGIN DECLARE SECTION;
    const char *conn = ctx->conn;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR CONTINUE;
    EXEC SQL AT :conn BEGIN WORK;
    EXEC SQL AT :conn SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;

    return ctx;
}

/**
 * Releases the given context after committing the transaction. If
 * there are other open handles to the context, then the transaction
 * will only be marked for commit. If the context is already marked
 * for rollback, then it will be released without commit.
 *
 * @param ctx
 *
 * @return 1 on success, 0 on failure
 */
int pg_release_commit(pgctx *ctx)
{
    if (!ctx->trans) {
        log_error("no transaction for PG context %s", ctx->conn);
        return 0;
    }

    if (ctx->trans == 1 && ctx->commit != -1) {
        log_debug("commiting work for PG context %s", ctx->conn);
        ctx->commit = 0;

        EXEC SQL BEGIN DECLARE SECTION;
        const char *conn = ctx->conn;
        EXEC SQL END DECLARE SECTION;

        EXEC SQL WHENEVER SQLERROR CONTINUE;
        EXEC SQL AT :conn COMMIT WORK;
    } else if (ctx->commit == -1) {
        log_debug("PG context %s is already marked for rollback", ctx->conn);
    } else {
        log_debug("marking PG context %s for commit", ctx->conn);
        ctx->commit = 1;
    }

    ctx->trans--;
    pg_context_release(ctx);

    return 1;
}

/**
 * Releases the given context after rolling back the transaction. If
 * there are other open handles to the context, then the transaction
 * will only be marked for rollback. Calling this function will
 * override any previous commit requests for the transaction.
 *
 * @param ctx
 *
 * @return 1 on success, 0 on failure
 */
int pg_release_rollback(pgctx *ctx)
{
    if (!ctx->trans) {
        log_error("no transaction for PG context %s", ctx->conn);
        return 0;
    }

    if (ctx->trans == 1 && ctx->commit == -1) {
        log_debug("rolling back PG context %s", ctx->conn);
        ctx->commit = 0;

        EXEC SQL BEGIN DECLARE SECTION;
        const char *conn = ctx->conn;
        EXEC SQL END DECLARE SECTION;

        EXEC SQL WHENEVER SQLERROR CONTINUE;
        EXEC SQL AT :conn ROLLBACK WORK;
    } else {
        log_debug("marking PG context %s for rollback", ctx->conn);
        ctx->commit = -1;
    }

    ctx->trans--;
    pg_context_release(ctx);

    return 1;
}

