/**
 * Bonsai - open source group collaboration and application lifecycle management
 * Copyright (c) 2011 Bob Carroll
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

/**
 * @brief   common Postgres functions
 *
 * @author  Bob Carroll (bob.carroll@alum.rit.edu)
 */

#include <stdlib.h>
#include <pthread.h>

#include <gcs/pgcommon.h>
#include <gcs/log.h>

/**
 * Connects to the database.
 *
 * @param dsn       the database source name in the form of dbname[@hostname][:port]
 * @param username  the username to connect as
 * @param passwd    the user password
 * @param maxconns  the maximum number of connections to open
 *
 * @return 1 on success, 0 on failure
 *
 * @seealso http://www.postgresql.org/docs/9.0/static/ecpg-connect.html
 */
int gcs_pg_connect(const char *dsn, const char *username, const char *passwd, int maxconns)
{
    gcslog_info("connecting to %s as %s", dsn, username);

    EXEC SQL BEGIN DECLARE SECTION;
    const char *dsnval = dsn;
    const char *usernameval = username;
    const char *passwdval = passwd;
    char *connval = (char *)alloca(sizeof(char) * 10);
    EXEC SQL END DECLARE SECTION;

    gcs_ctxpool_init(maxconns);

    EXEC SQL WHENEVER SQLERROR GOTO error;

    int i;
    for (i = 0; i < maxconns; i++) {
        sprintf(connval, "conn%d", i);

        EXEC SQL CONNECT TO :dsnval AS :connval USER :usernameval USING :passwdval;
        gcs_pgctx_alloc(connval);
    }

    gcslog_notice("connected to PG (%s)", dsn);
    return 1;

error:
    gcslog_error(sqlca.sqlerrm.sqlerrmc);
    return 0;
}

/**
 * Disconnects all open connections to the database, and frees
 * all associated resources.
 *
 * @return 1 on success, 0 on failure
 */
int gcs_pg_disconnect()
{
    gcslog_info("disconnecting from PG");

    EXEC SQL BEGIN DECLARE SECTION;
    const char *connval = NULL;
    EXEC SQL END DECLARE SECTION;

    EXEC SQL WHENEVER SQLERROR GOTO error;
    EXEC SQL DISCONNECT ALL;

    gcs_ctxpool_free();
    
    return 1;

error:
    gcslog_error(sqlca.sqlerrm.sqlerrmc);
    return 0;
}

